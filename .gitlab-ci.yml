image: $IMAGE

stages:
    - test
    - build
    - deploy

test:
    stage: test
    before_script:
        - apt-get update -qq && apt-get install -y -qq
          gcc make cmake curl wget
          python3-all-dev python-virtualenv
          zlib1g-dev libbz2-dev liblzma-dev libncurses5-dev libcurl4-gnutls-dev
          libssl-dev libffi-dev valgrind
    script:
        - make venv
        - CITEST=1 make -j 1 test mem_check
        - make docs


.arm-many-linux: &arm-many-linux-def
    image: quay.io/pypa/manylinux2014_aarch64
    stage: build
    tags:
        - arm64
    variables:
        DO_COUNT_TEST: 0
    before_script:
        # ARM CI image doesn't have git lfs, so need to jump some hoops
        - yum install -y wget
        - mkdir git-lfs && cd git-lfs
          && wget https://github.com/git-lfs/git-lfs/releases/download/v2.12.0/git-lfs-linux-arm64-v2.12.0.tar.gz
          && tar -xzvf git-lfs-linux-arm64-v2.12.0.tar.gz
          && chmod +x install.sh && ./install.sh
          && cd ..
        - GIT_SSL_NO_VERIFY=1 git lfs pull
        - file medaka/data/*.hdf5
        # strip some less useful dependencies
        - sed -i "s/numpy==1.16.1/numpy==1.19.2/" requirements.txt
        - sed -i "/parasail/d" requirements.txt
        - sed -i "/pyspoa/d" requirements.txt
        - sed -i "/whatshap/d" requirements.txt
        # replace architecture of python extension (what about libhts.a?)
        - sed -i "s/-msse3/-march=armv8-a+simd/" build.py
    artifacts:
        paths:
          - wheelhouse/*.whl
    only:
        - tags

build:arm-many-linux-6:
    <<: *arm-many-linux-def
    script:
        - ./build-wheels.sh . 6

.many-linux: &many-linux-def
  image: quay.io/pypa/manylinux2010_x86_64
  stage: build
  variables:
      DO_COUNT_TEST: 1
  artifacts:
      paths:
          - wheelhouse/*.whl
  only:
      - tags

.switch-to-cpu: &switch-to-cpu
    before_script:
        - export PACKAGE_NAME=medaka-cpu
        - sed -i 's/tensorflow/tensorflow-cpu/' requirements.txt


# Tensorflow (gpu) builds
build:many-linux-5:
    <<: *many-linux-def
    script:
        - ./build-wheels.sh . 5

build:many-linux-6:
    <<: *many-linux-def
    script:
        - ./build-wheels.sh . 6

build:many-linux-7:
    <<: *many-linux-def
    script:
        - ./build-wheels.sh . 7

build:many-linux-8:
    <<: *many-linux-def
    script:
        - ./build-wheels.sh . 8


# Tensorflow-cpu wheels
build-cpu:many-linux-5:
    <<: *many-linux-def
    <<: *switch-to-cpu
    script:
        - ./build-wheels.sh . 5

build-cpu:many-linux-6:
    <<: *many-linux-def
    <<: *switch-to-cpu
    script:
        - ./build-wheels.sh . 6

build-cpu:many-linux-7:
    <<: *many-linux-def
    <<: *switch-to-cpu
    script:
        - ./build-wheels.sh . 7

build-cpu:many-linux-8:
    <<: *many-linux-def
    <<: *switch-to-cpu
    script:
        - ./build-wheels.sh . 8


build:sdist:
    stage: build
    before_script:
        - apt-get update -qq && apt-get install -y -qq
          python3-all-dev python-virtualenv
    script:
        - make sdist
    artifacts:
        paths:
            - dist/*.tar.gz

deploy:pypi:
    stage: deploy
    before_script:
        - apt-get update -qq && apt-get install -y -qq
          python3-all-dev python-virtualenv
    script:
        - make build
        - source pypi_build/bin/activate
        - twine upload dist/*.tar.gz wheelhouse/*.whl
    only:
        - tags


push-github:
    stage: deploy
    before_script:
        - apt-get update -qq && apt-get install -y -qq
          git python3-all-dev python-virtualenv git-lfs
        - mkdir ~/.ssh/
        - cp $RESEARCH_BOT_GH_KEY ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
        - echo -e "Host github.com\n\tStrictHostKeyChecking no\n\tHostname ssh.github.com\n\tPort 443\n\n" > ~/.ssh/config
        - git config --global user.email "research.git@nanoporetech.com"
        - git config --global user.name "ontresearch"
    script:
        # Push master and tag to github
        - git remote add ont ${CI_REPOSITORY_URL} || true
        - git remote add github git@github.com:nanoporetech/${CI_PROJECT_NAME}.git || true
        - git fetch ont dev --tags
        - git fetch ont master
        - git fetch github master
        - git checkout --track github/master || git checkout master
        - git merge ${CI_COMMIT_TAG}
        - git push github master
        - git push github ${CI_COMMIT_TAG}
        # Make a github release page
        - make build
        - source pypi_build/bin/activate
        - pip install git+https://github.com/epi2me-labs/github_release.git
        - github_release ${CI_PROJECT_NAME} ${CI_COMMIT_TAG} CHANGELOG.md ${RESEARCH_BOT_GH_TOKEN}
          --artifacts dist/*.tar.gz
    only:
        - tags
